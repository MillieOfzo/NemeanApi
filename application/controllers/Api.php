<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require(APPPATH.'/libraries/REST_Controller.php');

class Api extends REST_Controller 
{
	protected $methods = [
		'index_delete' => ['level' => 10],
		'level_post' => ['level' => 10],
		'regenerateKey' => ['level' => 1],
		'auth_get' => [ 'limit' => 10],
		'auth_post' => ['level' => 1],
		'staff_get' => ['level' => 1, 'limit' => 100],
		'clients_get' => ['level' => 1, 'limit' => 100],
	];
	
	private $key = '';
	private $key_expiration = 999999;
	
	private $staff_whitelist = ['staffid','email','firstname','last_login','last_activity','full_name','role','active'];
	private $estimates_whitelist = ['id','sent','prefix','datesend','clientid','datecreated','expirydate','subtotal','total_tax','total','hash','clientnote','adminnote','invoiced_date','invoiceid','currency_name','client'];
	private $invoices_whitelist = ['id','sent','prefix','datesend','clientid','datecreated','duedate','subtotal','total_tax','total','hash','clientnote','adminnote','currency_name','total_left_to_pay','client'];
	private $clients_whitelist = ['userid','company','phonenumber','country','city','state','address'];
	private $clients_contacts_whitelist = ['id','userid','is_primary','firstname','lastname','email','phonenumber','last_login','active'];
	
    function __construct()
    {
        // Construct the parent class
        parent::__construct();
    }
	
	public function auth_get($type = '')
	{
		$this->generateKey();
	}
	
	public function auth_post()
	{
		$this->regenerateKey();
	}
	
    public function staff_get($user_id = '')
    {
		$this->validateKey($this->getKey());
		$this->load->model('staff_model');

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users
        if ($id === NULL && $user_id == '')
        {
			$users = $this->staff_model->get();
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($this->filterResponseArray($users, $this->staff_whitelist), REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        if ($user_id != '')
        {
			$user = $this->staff_model->get($user_id);
			
			if ($user)
			{
				$this->set_response($this->filterResponseArray($user, $this->staff_whitelist), REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
			}
			else
			{
				$this->set_response([
					'status' => FALSE,
					'message' => 'User could not be found'
				], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
			}
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }
	
	public function clients_get($client_id = '', $type = '', $type_id = '')
	{
		$this->validateKey($this->getKey());
		$this->load->model('clients_model');

		$id = $this->get('id');

        if ($id === NULL && $client_id == '')
        {
			$clients = $this->clients_model->get();
            if ($clients)
            {
                $this->response($this->filterResponseArray($clients, $this->clients_whitelist), REST_Controller::HTTP_OK);
            }
            else
            {
                $this->response([
                    'status' => FALSE,
                    'message' => 'No clients were found'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }	
	}

	public function client_get($client_id = '', $type = '', $type_id = '')
	{
		$this->validateKey($this->getKey());
		$this->load->model('clients_model');

		$id = $this->get('id');

        if ($id === NULL && $client_id != '')
        {
			$client = $this->clients_model->get($client_id);
			if ($client)
			{
				$this->set_response($this->filterResponseArray($client, $this->clients_whitelist), REST_Controller::HTTP_OK);
			}
			else
			{
				$this->set_response([
					'status' => FALSE,
					'message' => 'Client could not be found'
				], REST_Controller::HTTP_NOT_FOUND);
			}			
		}		
		
		if($client_id != '' && $type == 'contacts')
		{
			$client_contacts = $this->clients_model->get_contacts($client_id);
			if ($client_contacts)
			{
				$this->response($this->filterResponseArray($client_contacts, $this->clients_contacts_whitelist), REST_Controller::HTTP_OK);
			}
			else
			{
				$this->response([
					'status' => FALSE,
					'message' => 'No contacts were found'
				], REST_Controller::HTTP_NOT_FOUND);
			}			
        }
		
		if($client_id != '' && $type == 'contact')
		{
			if($type_id != '')
			{
				$client_contact = $this->clients_model->get_contacts($client_id, ['id' => $type_id]);
				if ($client_contact)
				{
					$this->response($this->filterResponseArray($client_contact, $this->clients_contacts_whitelist), REST_Controller::HTTP_OK);
				}
				else
				{
					$this->response([
						'status' => FALSE,
						'message' => 'No contact was found'
					], REST_Controller::HTTP_NOT_FOUND);
				}					
			}			
		}
		
		if($client_id != '' && $type == 'invoices')
		{
			$this->load->model('invoices_model');
			$client_invoices = $this->invoices_model->get($type_id, ['clientid' => $client_id]);
			if ($client_invoices)
			{
				$this->response($this->filterResponseArray($client_invoices, $this->invoices_whitelist), REST_Controller::HTTP_OK);
			}
			else
			{
				$this->response([
					'status' => FALSE,
					'message' => 'No clients invoices were found'
				], REST_Controller::HTTP_NOT_FOUND);
			}
		}

		if($client_id != '' && $type == 'estimates')
		{
			$this->load->model('estimates_model');
			$client_invoices = $this->estimates_model->get($type_id, ['clientid' => $client_id]);
			if ($client_invoices)
			{
				$this->response($this->filterResponseArray($client_invoices, $this->estimates_whitelist), REST_Controller::HTTP_OK);
			}
			else
			{
				$this->response([
					'status' => FALSE,
					'message' => 'No clients estimates were found'
				], REST_Controller::HTTP_NOT_FOUND);
			}
		}			
	}	
	
	public function invoices_get($invoice_id = '')
	{
		$this->validateKey($this->getKey());
		$this->load->model('invoices_model');

        $id = $this->get('id');

        if ($id === NULL && $invoice_id == '')
        {
			$invoices = $this->invoices_model->get();
            if ($invoices)
            {
                $this->response($this->filterResponseArray($invoices, $this->invoices_whitelist), REST_Controller::HTTP_OK);
            }
            else
            {
                $this->response([
                    'status' => FALSE,
                    'message' => 'No invoices were found'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }	
	}

	public function invoice_get($invoice_id = '')
	{
		$this->validateKey($this->getKey());
		$this->load->model('invoices_model');

        $id = $this->get('id');

        if($id === NULL && $invoice_id != '')
        {
			$invoice = $this->invoices_model->get($invoice_id);
			
			if ($invoice)
			{
				$this->set_response($this->filterResponseArray($invoice, $this->invoices_whitelist), REST_Controller::HTTP_OK); 
			}
			else
			{
				$this->set_response([
					'status' => FALSE,
					'message' => 'Invoice could not be found'
				], REST_Controller::HTTP_NOT_FOUND); 
			}
        }		
	}	

	public function estimates_get()
	{
		$this->validateKey($this->getKey());
		$this->load->model('estimates_model');

		$estimates = $this->estimates_model->get();
        if ($estimates)
        {
            $this->response($this->filterResponseArray($estimates, $this->estimates_whitelist), REST_Controller::HTTP_OK);
        }
        else
        {
            $this->response([
                'status' => FALSE,
                'message' => 'No estimates were found'
            ], REST_Controller::HTTP_NOT_FOUND);
        }		
	}

	public function estimate_get($est_id = '')
	{
		$this->validateKey($this->getKey());
		$this->load->model('estimates_model');

        $id = $this->get('id');

        if ($id === NULL && $est_id != '')
        {
			$estimate = $this->estimates_model->get($est_id);
            if ($estimate)
            {
                $this->response($this->filterResponseArray($estimate, $this->estimates_whitelist), REST_Controller::HTTP_OK);
            }
            else
            {
                $this->response([
                    'status' => FALSE,
                    'message' => 'No estimate was found'
                ], REST_Controller::HTTP_NOT_FOUND);
            }
        }			
	}
	
	private function filterResponseArray($arr, $exclude_arr)
	{
		$arr = (array)$arr;
		foreach ($arr as $arr_key => $arr_val)
		{
			if(is_array($arr_val))
			{
				foreach ($arr_val as $key => $value)
				{
					if(!empty($exclude_arr) && !in_array($key, $exclude_arr))
					{
						unset($arr[$arr_key][$key]);
					}
				}					
			}
			else
			{
				if(!empty($exclude_arr) && !in_array($arr_key, $exclude_arr))
				{

					unset($arr[$arr_key]);
				}
				if($arr_key == 'client')
				{
					$arr[$arr_key] = $this->filterResponseArray($arr_val, $this->clients_whitelist);
				}				
			}
		}			

		return $arr;
	}	
	
	private function validateKey($key)
	{
		$row = $this->_get_key($key);
		//check if it has expired
		if ((time() - $row->date_created) > $this->key_expiration)
		{
            // Suspend old key
            $this->_update_key($key, ['level' => 0]);			
			$this->response([
                'status' => false,
                'message' => 'Key has expired'
            ], REST_Controller::HTTP_UNAUTHORIZED);

		}
	}
	
    /**
     * Insert a key into the database
     *
     * @access public
     * @return void
     */
    private function generateKey()
    {
        // Build a new key
        $key = $this->_generate_key();

        // If no key level provided, provide a generic key
        $level = $this->put('level') ? $this->put('level') : 1;
        $ignore_limits = ctype_digit($this->put('ignore_limits')) ? (int) $this->put('ignore_limits') : 1;

        // Insert the new key
        if ($this->_insert_key($key, [
			'level' => $level, 
			'ignore_limits' => $ignore_limits,
			'ip_addresses' => $this->getUserIP(),
			'is_private_key' => 1,
			]))
        {
            $this->response([
                'status' => TRUE,
                'key' => $key,
                'expires' => time() + $this->key_expiration,
            ], REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
        }
        else
        {
            $this->response([
                'status' => FALSE,
                'message' => 'Could not save the key'
            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR); // INTERNAL_SERVER_ERROR (500) being the HTTP response code
        }
    }

    /**
     * Remove a key from the database to stop it working
     *
     * @access public
     * @return void
     */
    private function removeKey()
    {
        $key = $this->delete('key');

        // Does this key exist?
        if (!$this->_key_exists($key))
        {
            // It doesn't appear the key exists
            $this->response([
                'status' => FALSE,
                'message' => 'Invalid API key'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Destroy it
        $this->_delete_key($key);

        // Respond that the key was destroyed
        $this->response([
            'status' => TRUE,
            'message' => 'API key was deleted'
            ], REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    /**
     * Change the level
     *
     * @access public
     * @return void
     */
    private function setKeyLevel($key = '')
    {
        $key = $this->post('key');
        $new_level = $this->post('level');

        // Does this key exist?
        if (!$this->_key_exists($key))
        {
            // It doesn't appear the key exists
            $this->response([
                'status' => FALSE,
                'message' => 'Invalid API key'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Update the key level
        if ($this->_update_key($key, ['level' => $new_level]))
        {
            $this->response([
                'status' => TRUE,
                'message' => 'API key was updated'
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->response([
                'status' => FALSE,
                'message' => 'Could not update the key level'
            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR); // INTERNAL_SERVER_ERROR (500) being the HTTP response code
        }
    }

    /**
     * Suspend a key
     *
     * @access public
     * @return void
     */
    private function suspendKey($key = '')
    {
		$old_key = ($key == '') ? $this->post('key') : $key;

        // Does this key exist?
        if (!$this->_key_exists($old_key))
        {
            // It doesn't appear the key exists
            $this->response([
                'status' => FALSE,
                'message' => 'Invalid API key'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Update the key level
        if ($this->_update_key($old_key, ['level' => 0]))
        {
            $this->response([
                'status' => TRUE,
                'message' => 'Key was suspended'
            ], REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->response([
                'status' => FALSE,
                'message' => 'Could not suspend the user'
            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR); // INTERNAL_SERVER_ERROR (500) being the HTTP response code
        }
    }

    /**
     * Regenerate a key
     *
     * @access public
     * @return void
     */
    private function regenerateKey($key = '')
    {
        $old_key = ($key == '') ? $this->post('key') : $key;
        $key_details = $this->_get_key($old_key);
		
        // Does this key exist?
        if (!$key_details)
        {
            // It doesn't appear the key exists
            $this->response([
                'status' => FALSE,
                'message' => 'Invalid API key'
            ], REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Build a new key
        $new_key = $this->_generate_key();

        // Insert the new key
        if ($this->_insert_key($new_key, [
			'level' => $key_details->level, 
			'ignore_limits' => $key_details->ignore_limits,
			'ip_addresses' => $this->getUserIP(),
			'is_private_key' => 1,
			]))
        {
            // Suspend old key
            //$this->_update_key($old_key, ['level' => 0]);
			// Remove olf key 
			$this->_delete_key($old_key);
			
            $this->response([
                'status' => TRUE,
                'key' => $new_key
            ], REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
        }
        else
        {
            $this->response([
                'status' => FALSE,
                'message' => 'Could not save the key'
            ], REST_Controller::HTTP_INTERNAL_SERVER_ERROR); // INTERNAL_SERVER_ERROR (500) being the HTTP response code
        }
    }

    /* Helper Methods */
    private function getKey()
    {
		if(isset($this->_args['Api-Token']))
		{
			$this->key = $this->_args['Api-Token'];
		}
		return $this->key;
    }
	
	/* Private Data Methods */
    private function _generate_key()
    {
        do
        {
            // Generate a random salt
            $salt = base_convert(bin2hex($this->security->get_random_bytes(64)), 16, 36);

            // If an error occurred, then fall back to the previous method
            if ($salt === FALSE)
            {
                $salt = hash('sha256', time() . mt_rand());
            }

            $new_key = substr($salt, 0, config_item('rest_key_length'));
        }
        while ($this->_key_exists($new_key));

        return $new_key;
    }


	
    private function _get_key($key)
    {
        return $this->rest->db
            ->where(config_item('rest_key_column'), $key)
            ->get(config_item('rest_keys_table'))
            ->row();
    }

    private function _key_exists($key)
    {
        return $this->rest->db
            ->where(config_item('rest_key_column'), $key)
            ->count_all_results(config_item('rest_keys_table')) > 0;
    }

    private function _insert_key($key, $data)
    {
        $data[config_item('rest_key_column')] = $key;
        $data['date_created'] = function_exists('now') ? now() : time();

        return $this->rest->db
            ->set($data)
            ->insert(config_item('rest_keys_table'));
    }

    private function _update_key($key, $data)
    {
        return $this->rest->db
            ->where(config_item('rest_key_column'), $key)
            ->update(config_item('rest_keys_table'), $data);
    }

    private function _delete_key($key)
    {
        return $this->rest->db
            ->where(config_item('rest_key_column'), $key)
            ->delete(config_item('rest_keys_table'));
    }	

	/**
	* Fetch IP address from where the request originated
	* @return string
	*/
	private function getUserIP() {
		if( array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER) && !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ) {
			if (strpos($_SERVER['HTTP_X_FORWARDED_FOR'], ',')>0) {
				$addr = explode(",",$_SERVER['HTTP_X_FORWARDED_FOR']);
				return filter_var(trim($addr[0]), FILTER_VALIDATE_IP);
			} else {
				return $_SERVER['HTTP_X_FORWARDED_FOR'];
			}
		}
		else {
			return $_SERVER['REMOTE_ADDR'];
		}
	}	
}